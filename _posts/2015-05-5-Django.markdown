---
layout:     post
title:      "On Django"
subtitle:   "...and learning new things"
date:       2015-05-06 12:00:00
author:     "Alan"
header-img: "img/django/shovel.jpg"
---

<h1>Flurries</h1>
<p>I don't have any specific numbers, but trust me when I say there was a lot of snow in New York this winter. Once upon a time, a miniaturized version of myself would be excited at the prospect of snow. Snow meant school might be cancelled. It meant snowball fights. It turned the world I was familiar with into one that was foreign-looking and exciting.</p>

<p>Nowadays however, I look at snow a little differently. As an EMT it's come to mean dangerous roads and slippery sidewalks. In general it just means shoveling, and shoveling is tedious! I bring this up because there's always this feeling I have when I first step outside, shovel in hand, and gaze out on a white ocean of undisturbed snow. It's that feeling where you know this (relatively) great task is all ahead of you, and you're only just beginning. And you know there's nothing else to do but start chipping away at it.</p>

<center><img src="/img/django/underwood.jpg" alt=""></center>

<p>Learning something brand new is kind of similar I think. Especially when it comes to programming, and especially when it comes to something you plan to teach to yourself. This 'thing' you plan on learning, it's big, and the place to start isn't always obvious. Do you start with a tutorial? Or read a book? Maybe the best way is to just start building something, as people often say. I've been in this spot over and over since I started down the programming road, and yet I still don't really have a method. I just start shoveling, and if I'm using the wrong shovel it usually becomes apparent after a little while. Or maybe the neighbor has a snowblower, and didn't think to offer until they saw you out there..</p><br>

<h1>#Django</h1>

<p>So that long, dramatic intro was about me starting with the Django web-framework. Just like in that wonderfully crafted snow-shoveling metaphor, I decided to just jump in. I wanted to hit the ground running, so I went through the official tutorial in about two days, and then got myself involved in an existing project.</p>

<p>I want to note: coming from flask a lot of things made sense to me right out of the box. Views, models, and templates felt like old friends who I hadn't seen in a while, who'd grown beards and gotten married since we'd last hung out. At first I reeled when I saw how Django handles URL routing, but once I understood the pattern it wasn't bad at all (I still just need to learn regular expressions though.) Pretty much for each thing Django does, I make a mental comparison to how I'd do it in flask. Like learning a new language, I'm looking forward to just thinking in Django.</p>

<p>Cut to: <a href="http://charleschanlee.me/">Charlie</a> and I brainstorming project ideas. Charlie suggests building a sort of student management system for the <a href="http://rmotr.com/">group</a> that teaches the remote python class we finished a few months back. I'm on board. We pitch them and it turns out they've already started something similar, but if we want we can contribute to what's already there. So with their blessing, I got to work.</p><br>

<h2>Pull requests and Code reviews</h2>

<p>There's a right way and a wrong way to work collaboratively on a software project. Basically you can't be a cowboy, pushing changes directly to the master branch like some kind of animal. Civilized people open pull requests, and do code reviews. For a beginner such as myself this is a really good thing, since it's not always apparent to me when there's a problem with my code.<p>

<p>The feature I chose to work on was the course and class directories, and the class profile pages. My code underwent a significant transformation from what it looked like in the pull request initially, to what it was when it eventually got merged. Fortunately Martin, the project's main architect, was pretty patient when it came to pointing out the things that I needed to fix (and there were plenty of things.) In fact, my learning was accelerated by him pointing out flaws, or just telling me how to optimize my code.</p>

<center><img src="/img/django/karate-kid.jpg" alt="We use class based views on this project!"></center><br><br>

<h3>Let's look at the evolution of my views: </h3><br>
<center><img src="/img/django/initialView.png" alt=""></center>

<p>So to the trained eye there are a few things about this that immediately stand out as sub-optimal or just wrong. Lets break it down:</p>

<ul>
    <li><b>lines 8-11, 16-21:</b></li>   
        <ul>
            <li>Django has a built in function called <a href="https://docs.djangoproject.com/en/1.8/intro/tutorial03/#a-shortcut-get-object-or-404">get_object_or_404()</a> which actually handles all of this.</li>
        </ul><br>   
    <li><b>line 11, 22:</b></li>   
        <ul>
            <li>This is something I actually knew, but I wasn't thinking at the time I was writing the function. The course_list should have a value of 'None' assigned if the query turns up empty. The message 'No courses found' can and should be handled in the template.</li>
        </ul><br>    
    <li><b>lines 17-20:</b></li> 
        <ul>
            <li>Let me just preface this by saying I think list comprehensions are so awesome, that I want to use them everywhere, all the time. Retrospectively it looks pretty silly, since course.lecture_set.all() returns the list needed. At the time I guess I didn't understand how that query worked, so I created this unnecessarily complicated structure. Woops!</li>
        </ul><br>  
</ul>

<p>But beyond fixing these changes, Martin wanted to use <a href="https://docs.djangoproject.com/en/1.8/topics/class-based-views/">class based views</a> to keep everything as clean as possible. I ended up producing this: </p><br>
<center><img src="/img/django/afterviews.png" alt=""></center>

<p>Pretty cool right? I still used a regular function for the class_index view because I wasn't sure how to query the items I wanted in the class based version (although I know now.) Compare the simplicity of the ClassDetailView to the class_detail function in my initial attempt, there's a pretty big contrast. But don't be fooled by the minimalist nature of class based views, you can inject plenty of logic into your methods.</p>

<h2>Anyway!</h2>

<p>I've started my own project so I can go through building a Django application from start to finish. It'll allow me to move at my own pace, plus I can apply some of the more advanced techniques being used in the student management system. I plan to do a series of posts about the challenges that I encounter, and I expect it will be interesting. 
</p>

<p>Also, <a href="http://media.djangopony.com/img/magic-pony-django-wallpaper.png">THIS</a> was the Django logo?? I wonder who's idea that was! </p>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62213278-1', 'auto');
  ga('send', 'pageview');

</script>




